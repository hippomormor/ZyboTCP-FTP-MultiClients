package zybo_client.gui.jpanels;

import zybo_client.gui.handlers.MenuHandler;
import java.io.IOException;
import java.nio.charset.Charset;

public class JPanelMenu extends javax.swing.JPanel implements Runnable
{

    private final String ip;
    private final MenuHandler handler;
    private static boolean isOpenFtp;
    private static boolean isOpenTcp;

    public JPanelMenu(String ip) throws InterruptedException
    {
        this.ip = ip;
        // Create MenuHandler:
        handler = new MenuHandler(ip);
        initComponents();
        isOpenFtp = false;
        isOpenTcp = false;
    }

    @Override
    public void run()
    {
        // Save emoji as byte array (decimal values: 240, 159, 154, 182 == walking man emoji)):
        byte[] emojiBytes = new byte[]
        {
            (byte) 0xF0, (byte) 0x9F, (byte) 0x9A, (byte) 0xB6
        };
        // Save emoji as String as UTF-8:
        String emojiAsString = new String(emojiBytes, Charset.forName("UTF-8"));
        setText("Checking connectivity:\n\n");
        // Create thread to handle ping to server:
        Thread upState = new Thread(handler);
        upState.start();
        // Create loading screen with walking man emoji while waiting for ping:
        for (int i = 0; i < 11; i++)
        {
            try
            {
                // Wait for aprox. 300 * 10 == 3000 ms. (ping timeout is 3000):
                Thread.sleep(300);
                appendText(emojiAsString + " ");
            }
            catch (InterruptedException ex)
            {
                ex.printStackTrace();
            }          
        }
        while (true)
        {
            // Keep checking up-state every 1 seconds and update panel:
            String msg = handler.testUpState();
            setText(msg);
            try
            {
                Thread.sleep(3000);
            }
            catch (InterruptedException ex)
            {
                ex.printStackTrace();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        ConnectFTPButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        ConnectTCPButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();

        setBackground(new java.awt.Color(153, 153, 153));

        ConnectFTPButton.setText("Connect FTP");
        ConnectFTPButton.setToolTipText("Connect to Zybo via FTP");
        ConnectFTPButton.setFocusable(false);
        ConnectFTPButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ConnectFTPButtonActionPerformed(evt);
            }
        });

        ExitButton.setText("Exit");
        ExitButton.setToolTipText("Quit to desktop");
        ExitButton.setFocusable(false);
        ExitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ExitButtonActionPerformed(evt);
            }
        });

        ConnectTCPButton.setText("Connect TCP");
        ConnectTCPButton.setToolTipText("Connect to Zybo via TCP");
        ConnectTCPButton.setFocusable(false);
        ConnectTCPButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ConnectTCPButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setFocusable(false);
        jScrollPane1.setWheelScrollingEnabled(false);

        jTextArea.setEditable(false);
        jTextArea.setBackground(new java.awt.Color(0, 51, 0));
        jTextArea.setColumns(20);
        jTextArea.setFont(new java.awt.Font("OpenSansEmoji", 0, 22)); // NOI18N
        jTextArea.setForeground(new java.awt.Color(255, 204, 0));
        jTextArea.setRows(5);
        jTextArea.setCaretColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(jTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ConnectFTPButton, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConnectTCPButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ExitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 322, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ConnectTCPButton)
                        .addComponent(ConnectFTPButton))
                    .addComponent(ExitButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectFTPButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ConnectFTPButtonActionPerformed
    {//GEN-HEADEREND:event_ConnectFTPButtonActionPerformed
        if (!isOpenFtp && handler.getFtpUp()){
            try
            {
                handler.runFtp(ip);
                setFtpOpen();
            }
            catch (InterruptedException ex)
            {
                ex.printStackTrace();
            }
            catch (IOException ex)
            {
                appendText("\n\nUnable to connect via FTP");
            }
        }
        else if (isOpenFtp)
            appendText("\n\nFTP window already open");
    }//GEN-LAST:event_ConnectFTPButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ExitButtonActionPerformed
    {//GEN-HEADEREND:event_ExitButtonActionPerformed
        handler.exit();
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void ConnectTCPButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ConnectTCPButtonActionPerformed
    {//GEN-HEADEREND:event_ConnectTCPButtonActionPerformed
        if (!isOpenTcp && handler.getTcpUp()){
            try
            {
                handler.runTcp(ip);
                setTcpOpen();
            }
            catch (InterruptedException ex)
            {
                ex.printStackTrace();
            }
            catch (IOException ex)
            {
                appendText("\n\nUnable to connect via TCP");
            }
        }
        else if (isOpenTcp)
            appendText("\n\nTCP window already open");        
    }//GEN-LAST:event_ConnectTCPButtonActionPerformed

    public void setText(String in)
    {
        jTextArea.setText(in);
    }

    public void appendText(String in)
    {
        jTextArea.append(in);
    }
    
    public void setTcpOpen()
    {
        isOpenTcp = !isOpenTcp;
    }
     
    public void setFtpOpen()
    {
        isOpenFtp = !isOpenFtp;
    }
    
    public boolean getTcpOpen()
    {
        return isOpenTcp;
    }
     
    public boolean getFtpOpen()
    {
        return isOpenFtp;        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectFTPButton;
    private javax.swing.JButton ConnectTCPButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    // End of variables declaration//GEN-END:variables
}
